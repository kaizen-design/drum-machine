{"version":3,"sources":["templates/layout/Navbar.js","templates/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","brand","Footer","href","target","rel","audioBank","keyCode","keyTrigger","id","url","PadBank","padBank","map","el","key","clipId","clip","updateDisplay","DrumPad","state","buttonStyle","playSound","bind","handleKeyPress","activatePad","document","addEventListener","this","removeEventListener","e","setState","sound","getElementById","currentTime","play","replace","setTimeout","type","onClick","src","React","Component","PadControls","htmlFor","min","max","step","value","volume","onChange","adjustVolume","role","display","App","String","fromCharCode","name","Math","round","clearDisplay","slice","call","getElementsByClassName","forEach","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a9bb94b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = (props) => {\n  return (\n    <nav className=\"navbar navbar-dark bg-gradient-dark shadow-sm\">\n      <div className=\"container justify-content-center\">\n        <span className=\"navbar-brand mb-0 h1\">{props.brand}</span>\n      </div>\n    </nav>\n  )\n};\n\nexport default Navbar;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"container py-3 text-center\">\n      <small>\n        Designed & built by <a href=\"https://github.com/kaizen-design\" target=\"_blank\" rel=\"noopener noreferrer\">Denis B.</a>\n      </small>\n    </footer>\n  )\n};\n\nexport default Footer;\n","import React from 'react';\nimport Navbar from './templates/layout/Navbar';\nimport Footer from './templates/layout/Footer';\n\nconst projectName = 'Drum Machine';\n\nconst audioBank = [\n  {\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  }\n];\n\nfunction PadBank(props) {\n  const padBank = audioBank.map((el) => {\n    return (\n      <div className=\"col-4 mb-2\" key={el.id}>\n        <DrumPad\n          clipId={el.id}\n          clip={el.url}\n          keyTrigger={el.keyTrigger}\n          keyCode={el.keyCode}\n          updateDisplay={props.updateDisplay} />\n      </div>\n    )\n  });\n  return (\n    <div className=\"pad-bank form-row\">\n      {padBank}\n    </div>\n  )\n}\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonStyle: ''\n    };\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.activatePad = this.activatePad.bind(this);\n  }\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n  handleKeyPress(e) {\n    if (e.keyCode === this.props.keyCode) {\n      this.playSound();\n    }\n  }\n  activatePad() {\n    if (this.state.buttonStyle === '') {\n      this.setState({\n        buttonStyle: 'focus active'\n      });\n    } else {\n      this.setState({\n        buttonStyle: ''\n      });\n    }\n  }\n  playSound() {\n    const sound = document.getElementById(this.props.keyTrigger);\n    sound.currentTime = 0;\n    sound.play();\n    this.props.updateDisplay(this.props.clipId.replace(/-/g, ' '));\n    this.activatePad();\n    setTimeout(() => this.activatePad(), 100);\n  }\n  render() {\n    return (\n      <button type=\"button\"\n              id={this.props.clipId}\n              onClick={this.playSound}\n              className={'drum-pad btn btn-block btn-dark ' + this.state.buttonStyle}>\n        <audio className='clip' id={this.props.keyTrigger} src={this.props.clip} />\n        {this.props.keyTrigger}\n      </button>\n    );\n  }\n}\n\nfunction PadControls(props) {\n  return (\n    <div className=\"jumbotron p-4 border mb-0\">\n      <div className=\"form-group\">\n        <label htmlFor=\"volumeControl\">Volume</label>\n        <input type=\"range\"\n               className=\"custom-range\"\n               id=\"volumeControl\"\n               min=\"0\"\n               max=\"1\"\n               step=\"0.01\"\n               value={props.volume}\n               onChange={props.adjustVolume} />\n      </div>\n      <div id=\"display\" className=\"alert alert-dark text-center mb-0\" role=\"alert\">\n        <b>{props.display}</b>\n      </div>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: String.fromCharCode(160),\n      volume: 0.5\n    };\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.adjustVolume = this.adjustVolume.bind(this);\n  }\n  updateDisplay(name) {\n    this.setState({\n      display: name\n    });\n  }\n  adjustVolume(e) {\n    this.setState({\n      volume: e.target.value,\n      display: \"Volume: \" + Math.round(e.target.value * 100)\n    });\n    setTimeout(() => this.clearDisplay(), 1000);\n  }\n  clearDisplay(){\n    this.setState({\n      display: String.fromCharCode(160)\n    });\n  }\n  render() {\n    const clips = [].slice.call(document.getElementsByClassName('clip'));\n    clips.forEach(sound => {\n      sound.volume = this.state.volume\n    });\n    return (\n      <div className=\"h-100 d-flex flex-column\">\n        <Navbar brand={projectName} />\n        <main role=\"main\" className=\"App container my-auto py-3\">\n          <div id=\"drum-machine\" className=\"row\">\n            <div className=\"col-lg-8 mb-4 mb-lg-0\">\n              <PadBank updateDisplay={this.updateDisplay} />\n            </div>\n            <div className=\"col-lg-4\">\n              <PadControls volume={this.state.volume}\n                        adjustVolume={this.adjustVolume}\n                        display={this.state.display} />\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/App.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}